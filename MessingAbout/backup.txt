import java.util.*; //p sure this just means all

public class sand {
    static int[] dims   = {120,50};

    public static void printResult(int[] dims, String[][] positions, String air, String sand, String wall) {
        //this prints the result
        for (int y = 1; y <= dims[1]; y++) {
            String currLine = "";

            for (int x = 1; x <= dims[0]; x++) {
                String append = "";
                if (y == 1 || y == dims[1] || x == 1 || x == dims[0] ) {
                    append = wall;
                }
                else {
                    append = positions[x-2][y-2];
                }

                currLine = currLine + append;
            }

            System.out.println(currLine);
        }
    }

    //main program
    public static void main ( String[] args) {
        String air = " ";
        String sand = "#";
        String wall = "/";
        String[][] positions = new String[dims[0]-2][dims[1]-2];
        int timeSteps = 50;

        //populate the positions array
        //-2 on the x and y because you dont want to populate the very outer indexes
        //whenever printing, always access the index+1
        for (int y = 0; y < dims[1]-2; y++) {
            for (int x = 0; x < dims[0]-2; x++) {
                if (y <= 10 && (Math.random() < 0.5)) {
                    positions[x][y] = sand;
                }
                else {
                    positions[x][y] = air;
                }
            }
        }

        printResult(dims, positions, air, sand, wall);
        //simulation
        for (int i = 0; i < timeSteps; i++) {

            for (int y = dims[1]-4; y >= 0; y = y - 1){ //-4: -2 from it being 2 smaller than dims, -2 because you ignore the bottom layer
                for (int x = 0; x < dims[0]-2; x++){
                    //check if there is a space below it, if so swap it
                    String currentChar = positions[x][y];
                    String beneathChar = positions[x][y+1];
                    String leftChar = positions[Math.max(0,x-1)][y+1];
                    String rightChar = positions[Math.min(dims[0]-3,x+1)][y+1];
                    boolean[] leftMiddleRight = {false, false, false};
                    boolean notMoved = true;
                    //not memory efficient but cry more
                    if (currentChar == "#") {
                        if (beneathChar == " " ) { leftMiddleRight[1] = true; }
                        if (leftChar == " " )    { leftMiddleRight[0] = true; }
                        if (rightChar == " " )   { leftMiddleRight[2] = true; }
                        //its a botch solution for now but it works
                        if (leftMiddleRight[0] && notMoved && (Math.random() < 0.333)) {
                            positions[x][y] = air;
                            positions[Math.max(0,x-1)][y+1] = sand;
                            notMoved = false;
                        }
                        else if (leftMiddleRight[2] && notMoved && (Math.random() < 0.333)) {
                            positions[x][y] = air;
                            positions[Math.min(dims[0]-3,x+1)][y+1] = sand;
                            notMoved = false;
                        }
                        //if it still hasnt moved, just go down
                        if (leftMiddleRight[1] && notMoved) {
                            positions[x][y] = air;
                            positions[x][y+1] = sand;                      
                        }
                    }
                }
            }
        }
        printResult(dims, positions, air, sand, wall);
    }
}
